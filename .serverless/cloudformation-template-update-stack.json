{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "LucastestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-lucastest"
      }
    },
    "FlightsearchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-flightsearch"
      }
    },
    "UpdatePassengersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-updatePassengers"
      }
    },
    "EventBridgeTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-eventBridgeTest"
      }
    },
    "RotateSecretLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-rotateSecret"
      }
    },
    "FrictionlessStepFunctionTestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-frictionlessStepFunctionTest"
      }
    },
    "UpdateLfsEupgradeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-updateLfsEupgrade"
      }
    },
    "ContentJsonFileValidatorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lucastest-appsync-poc-int-contentJsonFileValidator"
      }
    },
    "LucastestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/lucastest.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-lucastest",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LucastestLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "FlightsearchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/flightsearch.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-flightsearch",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FlightsearchLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "UpdatePassengersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/updatePassengers.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-updatePassengers",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdatePassengersLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "EventBridgeTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/eventBridgeTest.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-eventBridgeTest",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EventBridgeTestLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "RotateSecretLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/rotateSecret.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-rotateSecret",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RotateSecretLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "FrictionlessStepFunctionTestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/frictionlessStepFunctionTest.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-frictionlessStepFunctionTest",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FrictionlessStepFunctionTestLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "UpdateLfsEupgradeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/updateLfsEupgrade.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-updateLfsEupgrade",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateLfsEupgradeLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "ContentJsonFileValidatorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/lucastest-appsync-poc.zip"
        },
        "Handler": "src/handlers/contentJsonFileValidator.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "lucastest-appsync-poc-int-contentJsonFileValidator",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "SECRETS_MANAGER_ENDPOINT": "https://secretsmanager.us-east-1.amazonaws.com",
            "CONTENT_BUCKET_NAME": "aco-content-bucket"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ContentJsonFileValidatorLogGroup",
        "HelloAppsyncRole"
      ]
    },
    "LucastestLambdaVersionxEwq8U3iQUllRMyTcU7nubjqwy1KPEPs9OJip7ZQU8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LucastestLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "FlightsearchLambdaVersionFRyxgoUEx92WcucImkVXPcUUguJg51crXxrc6x0xuNs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FlightsearchLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "UpdatePassengersLambdaVersion84AE1RTMusFtDtccdpqZY5lnr4L9oRdoXqEZCcY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePassengersLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "EventBridgeTestLambdaVersionZG6SNi9oM1YKcoCOgWsX07Pe5il0h7R2a9jBrspgA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventBridgeTestLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "RotateSecretLambdaVersion7AMTeWl8Wn2dXCz7dwUByKFzXY8SCgYoPPg3dA8m9L0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RotateSecretLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "FrictionlessStepFunctionTestLambdaVersion99GO7fXu5yOQ1oIyvedVAzGOCITYyMHuEnUiAt5Ps": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FrictionlessStepFunctionTestLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "UpdateLfsEupgradeLambdaVersionyD35VWijjaqcBz5wwlbGw1rrmpUshY58SveUZ38wkTc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateLfsEupgradeLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "ContentJsonFileValidatorLambdaVersion26lOuqRKtgzSVXAzZkyovs6uT6cHz5AItApF8MQu54": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ContentJsonFileValidatorLambdaFunction"
        },
        "CodeSha256": "CyKUONJgU1gXR57HZjw+z1wb8npV43Hl2rftwlFafjU="
      }
    },
    "ContentJsonFileValidatorCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "ContentJsonFileValidatorLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "lucastest-appsync-poc-int-contentJsonFileValidator",
        "BucketName": "aco-content-bucket",
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": [
              {
                "Prefix": "aco-content-file-prefix/"
              },
              {
                "Suffix": ".json"
              }
            ]
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "int",
                  "lucastest-appsync-poc",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        "aco-content-bucket"
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lucastest-appsync-poc/int/1710446180839-2024-03-14T19:56:20.839Z/custom-resources.zip"
        },
        "FunctionName": "lucastest-appsync-poc-int-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs16.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "int-lucastest-appsync-poc",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "EventBridgeTestLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EventBridgeTestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEventBridgeTest": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EventBridgeTestLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetEventbridgetest": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /eventBridgeTest",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEventBridgeTest"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEventBridgeTest"
    },
    "HelloAppsyncRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "HelloAppsyncRole-int",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com",
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "aco-logging-policy-int",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "aco-lfs-cache-read-policy-int",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "hello-serverless-read-s3-bucket-int",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectMetadata",
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::aco-content-bucket"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::aco-content-bucket/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MySNSTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "SQSQueue1": {
      "Type": "AWS::SQS::Queue"
    },
    "SQSQueue1Policy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "SQSQueue1"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "SQSQueue1",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "MySNSTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SQSQueue2": {
      "Type": "AWS::SQS::Queue"
    },
    "SQSQueue2Policy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "SQSQueue2"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "sqs:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "SQSQueue2",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "MySNSTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SQSQueueDLQ": {
      "Type": "AWS::SQS::Queue"
    },
    "SQSQueue1Subscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "MySNSTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSQueue1",
            "Arn"
          ]
        },
        "FilterPolicyScope": "MessageBody",
        "FilterPolicy": {
          "acoType": [
            "sqs1"
          ]
        }
      }
    },
    "SQSQueue2Subscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "MySNSTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSQueue2",
            "Arn"
          ]
        },
        "FilterPolicyScope": "MessageBody",
        "FilterPolicy": {
          "acoType": [
            "sqs2"
          ]
        }
      }
    },
    "SNSTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {
            "Ref": "MySNSTopic"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                  }
                ]
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "MySNSTopic"
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "SQSQueueDLQ",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "PaymentFlowStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": "PaymentFlowStateMachine-int",
        "DefinitionString": {
          "Fn::Sub": "{\n  \"Comment\": \"A state machine that orchestrates multiple Lambda functions based on success/failure conditions.\",\n  \"StartAt\": \"Fetch Shopping Cart\",\n  \"States\": {\n    \"Fetch Shopping Cart\": {\n      \"Type\": \"Task\",\n      \"Parameters\": {\n        \"TableName\": \"shopping-cart-poc\",\n        \"KeyConditionExpression\": \"#ShoppingCartIdColumn = :ShoppingCartIdValue AND begins_with(#SkColumn, :SkValue)\",\n        \"ExpressionAttributeNames\": {\n          \"#ShoppingCartIdColumn\": \"ShoppingCartId\",\n          \"#SkColumn\": \"SK\"\n        },\n        \"ExpressionAttributeValues\": {\n          \":ShoppingCartIdValue\": {\n            \"S.$\": \"$.input.ShoppingCartId\"\n          },\n          \":SkValue\": {\n            \"S.$\": \"States.Format('session#{}', $.input.BookingSessionId)\"\n          }\n        },\n        \"ConsistentRead\": true\n      },\n      \"Resource\": \"arn:aws:states:::aws-sdk:dynamodb:query\",\n      \"Next\": \"Data Fetch Result\",\n      \"ResultPath\": \"$.bookingData\",\n      \"ResultSelector\": {\n        \"ShoppingCart.$\": \"$.Items\"\n      }\n    },\n    \"Data Fetch Result\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"And\": [\n            {\n              \"Variable\": \"$.bookingData.ShoppingCart\",\n              \"IsPresent\": true\n            },\n            {\n              \"Variable\": \"$.bookingData.ShoppingCart[0]\",\n              \"IsPresent\": true\n            },\n            {\n              \"Variable\": \"$.bookingData.ShoppingCart[0].ShoppingCartId.S\",\n              \"StringEqualsPath\": \"$.input.ShoppingCartId\"\n            }\n          ],\n          \"Comment\": \"Data Found\",\n          \"Next\": \"Authorize Payment\"\n        },\n        {\n          \"Or\": [\n            {\n              \"Not\": {\n                \"Variable\": \"$.bookingData.ShoppingCart\",\n                \"IsPresent\": true\n              }\n            }\n          ],\n          \"Comment\": \"Data Not Found\",\n          \"Next\": \"Format Session Expired Error\"\n        }\n      ]\n    },\n    \"Format Session Expired Error\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Set status to \\\"Authorize Failure\\\"\",\n      \"Parameters\": {\n        \"step\": \"authorize\",\n        \"bookingData\": null,\n        \"input.$\": \"$.input\",\n        \"result.$\": \"$.result\",\n        \"warnings.$\": \"$.warnings\",\n        \"sessionData.$\": \"$.sessionData\",\n        \"errors\": [\n          {\n            \"friendlyCode\": null,\n            \"systemErrorCode\": \"\",\n            \"systemErrorMessage\": \"Your session has expired\",\n            \"systemService\": \"Purchase\",\n            \"systemSubService\": \"Authorize-Payment\"\n          }\n        ]\n      }\n    },\n    \"Authorize Payment\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"Parameters\": {\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:747016795213:function:log-input:$LATEST\",\n        \"Payload\": {\n          \"step\": \"authorize\",\n          \"bookingData.$\": \"$.bookingData\",\n          \"input.$\": \"$.input\",\n          \"result.$\": \"$.result\",\n          \"errors.$\": \"$.errors\",\n          \"warnings.$\": \"$.warnings\",\n          \"sessionData.$\": \"$.sessionData\"\n        }\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.TaskFailed\"\n          ],\n          \"BackoffRate\": 2,\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 1,\n          \"Comment\": \"Retry on 500 error or timeout from EIP\"\n        },\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2,\n          \"Comment\": \"AWS Lambda Service Errors Retrier\"\n        }\n      ],\n      \"Next\": \"Authorize Payment Result\",\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"Format Default Authorize Error\",\n          \"Comment\": \"Max retries reached\",\n          \"ResultPath\": \"$.error\"\n        }\n      ],\n      \"OutputPath\": \"$.Payload\"\n    },\n    \"Format Default Authorize Error\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Set status to \\\"Authorize Failure\\\"\",\n      \"Parameters\": {\n        \"step\": \"authorize\",\n        \"bookingData.$\": \"$.bookingData\",\n        \"input.$\": \"$.input\",\n        \"result.$\": \"$.result\",\n        \"warnings.$\": \"$.warnings\",\n        \"sessionData.$\": \"$.sessionData\",\n        \"errors\": [\n          {\n            \"friendlyCode\": null,\n            \"systemErrorCode\": \"\",\n            \"systemErrorMessage.$\": \"$.error.Cause\",\n            \"systemService\": \"Purchase\",\n            \"systemSubService\": \"Authorize-Payment\"\n          }\n        ]\n      }\n    },\n    \"Authorize Payment Result\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.result\",\n          \"StringEquals\": \"Authorize Success\",\n          \"Comment\": \"Authorize Success\",\n          \"Next\": \"Set status to \\\"Authorize Success\\\"\"\n        },\n        {\n          \"Variable\": \"$.result\",\n          \"StringEquals\": \"Authorize Failure\",\n          \"Comment\": \"Non-retriable Error\",\n          \"Next\": \"Set status to \\\"Authorize Failure\\\"\"\n        }\n      ]\n    },\n    \"Set status to \\\"Authorize Success\\\"\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\n      \"Parameters\": {\n        \"TableName\": \"purchase-session-poc\",\n        \"Key\": {\n          \"PurchaseSessionId\": {\n            \"S.$\": \"$.input.PurchaseSessionId\"\n          },\n          \"SK\": {\n            \"S\": \"details#\"\n          }\n        },\n        \"UpdateExpression\": \"SET #StatusColumn = :AuthorizeSuccessStatusValue\",\n        \"ExpressionAttributeNames\": {\n          \"#StatusColumn\": \"PaymentStatus\"\n        },\n        \"ExpressionAttributeValues\": {\n          \":AuthorizeSuccessStatusValue\": {\n            \"S\": \"Authorize Success\"\n          }\n        },\n        \"ConditionExpression\": \"attribute_exists(SK)\"\n      },\n      \"ResultPath\": null,\n      \"Next\": \"Ticketing\"\n    },\n    \"Ticketing\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload\",\n      \"Parameters\": {\n        \"Payload\": {\n          \"step\": \"ticketing\",\n          \"bookingData.$\": \"$.bookingData\",\n          \"input.$\": \"$.input\",\n          \"result.$\": \"$.result\",\n          \"errors.$\": \"$.errors\",\n          \"warnings.$\": \"$.warnings\",\n          \"sessionData.$\": \"$.sessionData\"\n        },\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:747016795213:function:log-input:$LATEST\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.TaskFailed\"\n          ],\n          \"BackoffRate\": 2,\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"Comment\": \"Retry on 500 error or timeout from EIP\"\n        },\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2,\n          \"Comment\": \"AWS Lambda Service Errors Retrier\"\n        }\n      ],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"Format Default Ticketing Error\",\n          \"Comment\": \"Max retries reached\",\n          \"ResultPath\": \"$.error\"\n        }\n      ],\n      \"Next\": \"Ticketing Result\"\n    },\n    \"Format Default Ticketing Error\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Set status to \\\"Ticketing Failure\\\"\",\n      \"Parameters\": {\n        \"step\": \"ticketing\",\n        \"bookingData.$\": \"$.bookingData\",\n        \"input.$\": \"$.input\",\n        \"result.$\": \"$.result\",\n        \"warnings.$\": \"$.warnings\",\n        \"sessionData.$\": \"$.sessionData\",\n        \"errors\": [\n          {\n            \"friendlyCode\": null,\n            \"systemErrorCode\": \"\",\n            \"systemErrorMessage.$\": \"$.error.Cause\",\n            \"systemService\": \"Purchase\",\n            \"systemSubService\": \"Ticketing\"\n          }\n        ]\n      }\n    },\n    \"Ticketing Result\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.result\",\n          \"StringEquals\": \"Ticketing Success\",\n          \"Next\": \"Set status to \\\"Ticketing Success\\\"\",\n          \"Comment\": \"Ticketing Success\"\n        },\n        {\n          \"Variable\": \"$.result\",\n          \"StringEquals\": \"Ticketing Failure\",\n          \"Next\": \"Set status to \\\"Ticketing Failure\\\"\",\n          \"Comment\": \"Non-retriable Error\"\n        }\n      ]\n    },\n    \"Set status to \\\"Ticketing Success\\\"\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\n      \"Parameters\": {\n        \"TableName\": \"purchase-session-poc\",\n        \"Key\": {\n          \"PurchaseSessionId\": {\n            \"S.$\": \"$.input.PurchaseSessionId\"\n          },\n          \"SK\": {\n            \"S\": \"details#\"\n          }\n        },\n        \"UpdateExpression\": \"SET #StatusColumn = :TicketingSuccessStatusValue\",\n        \"ExpressionAttributeNames\": {\n          \"#StatusColumn\": \"PaymentStatus\"\n        },\n        \"ExpressionAttributeValues\": {\n          \":TicketingSuccessStatusValue\": {\n            \"S\": \"Ticketing Success\"\n          }\n        },\n        \"ConditionExpression\": \"attribute_exists(SK)\"\n      },\n      \"ResultPath\": null,\n      \"Next\": \"Call Notification Mutation\"\n    },\n    \"Set status to \\\"Authorize Failure\\\"\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\n      \"Parameters\": {\n        \"TableName\": \"purchase-session-poc\",\n        \"Key\": {\n          \"PurchaseSessionId\": {\n            \"S.$\": \"$.input.PurchaseSessionId\"\n          },\n          \"SK\": {\n            \"S\": \"details#\"\n          }\n        },\n        \"UpdateExpression\": \"SET #StatusColumn = :AuthorizeFailureStatusValue\",\n        \"ExpressionAttributeNames\": {\n          \"#StatusColumn\": \"PaymentStatus\"\n        },\n        \"ExpressionAttributeValues\": {\n          \":AuthorizeFailureStatusValue\": {\n            \"S\": \"Authorize Failure\"\n          }\n        },\n        \"ConditionExpression\": \"attribute_exists(SK)\"\n      },\n      \"ResultPath\": null,\n      \"Next\": \"Exception Handler\"\n    },\n    \"Exception Handler\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"Parameters\": {\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:747016795213:function:log-input:$LATEST\",\n        \"Payload\": {\n          \"step\": \"exceptions\",\n          \"errors.$\": \"$.errors\",\n          \"warnings.$\": \"$.warnings\"\n        }\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"Lambda.ServiceException\",\n            \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\",\n            \"Lambda.TooManyRequestsException\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"Format Resulting Exceptions\",\n      \"ResultPath\": \"$.exceptions\"\n    },\n    \"Format Resulting Exceptions\": {\n      \"Type\": \"Pass\",\n      \"Next\": \"Call Notification Mutation\",\n      \"Parameters\": {\n        \"step\": \"exceptions\",\n        \"bookingData.$\": \"$.bookingData\",\n        \"input.$\": \"$.input\",\n        \"result.$\": \"$.result\",\n        \"sessionData.$\": \"$.sessionData\",\n        \"warnings.$\": \"$.exceptions.Payload.warnings\",\n        \"errors.$\": \"$.exceptions.Payload.errors\"\n      }\n    },\n    \"Call Notification Mutation\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"Parameters\": {\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:747016795213:function:log-input:$LATEST\",\n        \"Payload\": {\n          \"step\": \"notification\",\n          \"bookingData.$\": \"$.bookingData\",\n          \"input.$\": \"$.input\",\n          \"result.$\": \"$.result\",\n          \"errors.$\": \"$.errors\",\n          \"warnings.$\": \"$.warnings\",\n          \"sessionData.$\": \"$.sessionData\"\n        }\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"Lambda.ServiceException\",\n            \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\",\n            \"Lambda.TooManyRequestsException\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"End\": true,\n      \"Comment\": \"Lambda that calls the mutation to notify the frontend via subscription\",\n      \"OutputPath\": \"$.Payload\"\n    },\n    \"Set status to \\\"Ticketing Failure\\\"\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\n      \"Parameters\": {\n        \"TableName\": \"purchase-session-poc\",\n        \"Key\": {\n          \"PurchaseSessionId\": {\n            \"S.$\": \"$.input.PurchaseSessionId\"\n          },\n          \"SK\": {\n            \"S\": \"details#\"\n          }\n        },\n        \"UpdateExpression\": \"SET #StatusColumn = :TicketingFailureStatusValue\",\n        \"ExpressionAttributeNames\": {\n          \"#StatusColumn\": \"PaymentStatus\"\n        },\n        \"ExpressionAttributeValues\": {\n          \":TicketingFailureStatusValue\": {\n            \"S\": \"Ticketing Failure\"\n          }\n        },\n        \"ConditionExpression\": \"attribute_exists(SK)\"\n      },\n      \"ResultPath\": null,\n      \"Next\": \"Call Notification Mutation\"\n    }\n  }\n}\n"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StateMachineRole",
            "Arn"
          ]
        }
      }
    },
    "StateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "StateMachineExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "states.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "StatesExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "dynamodb:*",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "hello-appsync-int",
        "XrayEnabled": true,
        "AuthenticationType": "AWS_IAM",
        "AdditionalAuthenticationProviders": [
          {
            "AuthenticationType": "API_KEY"
          }
        ],
        "IntrospectionConfig": "DISABLED"
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "type Query {\r\n  getOfficeId(\r\n    input: PassengerInput\r\n  ): [Passenger!]! @aws_api_key @aws_iam\r\n\r\n  getLucasTest(\r\n    input: PassengerInput\r\n  ): [Passenger!]! @aws_api_key @aws_iam\r\n\r\n  getLucasTest2 (\r\n    input: PassengerInput\r\n  ): [Passenger!]! @aws_api_key @aws_iam\r\n\r\n  getLucasTest3 (\r\n    input: LucasTest3Input\r\n  ): LucasTest3Response @aws_iam\r\n\r\n  lfs(\r\n    input: LfsInput\r\n  ): Passenger @aws_api_key @aws_iam\r\n\r\n  retrieveMiniRules(\r\n    input: PassengerInput\r\n  ): Passenger @aws_api_key @aws_iam\r\n\r\n  getPaymentSession (input: String): String @aws_api_key @aws_iam\r\n\r\n  updateLfsEupgrade (input: String): String @aws_api_key @aws_iam\r\n}\r\n\r\ntype Mutation {\r\n  addPassengers (\r\n    input: PassengerInput\r\n  ): Passenger @aws_api_key @aws_iam\r\n  orderCreation (\r\n    input: OrderCreationInput!\r\n  ): OrderCreationResponse! @aws_iam\r\n}\r\n\r\ntype Subscription  @aws_api_key @aws_iam {\r\n  onOrderCreated (subscriptionId: String!): OrderCreationResponse\r\n  @aws_subscribe(mutations: [\"orderCreation\"])\r\n}\r\n\r\ninput PassengerInput {\r\n  itineraries: [ItineraryInput]!\r\n}\r\n\r\n\r\n\r\ninput ItineraryInput {\r\n  id: String!\r\n}\r\n\r\ninput LucasTest3Input {\r\n  bookingSessionId: String!\r\n  id: String\r\n  testJson: String\r\n}\r\n\r\ninput LfsInput {\r\n  itineraries: [ItineraryInput]!\r\n}\r\n\r\ninput OrderCreationInput {\r\n  subscriptionId: String!\r\n  pnrStatus: String\r\n  pnrNumber: String\r\n}\r\n\r\ninput OrderCreationSubscriptionInput {\r\n  subscriptionId: String!\r\n  what: String\r\n}\r\n\r\ntype OrderCreationResponse @aws_api_key @aws_iam {\r\n  isOrderCreated: Boolean\r\n  subscriptionId: String\r\n}\r\n\r\ntype Passenger @aws_api_key @aws_iam {\r\n  name: String!\r\n}\r\n\r\ntype Passengerv2 @aws_api_key @aws_iam {\r\n  name: String!\r\n}\r\n\r\ntype LucasTest3Response @aws_api_key @aws_iam {\r\n  id: String\r\n  test1: String\r\n  test2: String\r\n  originalJson: String\r\n}\r\n",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlApilucastest": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Description": "Lucas Test api key",
        "Expires": 1741978800
      }
    },
    "GraphQlDstestTableDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "testTableDs",
        "Description": "testTable",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "testTable",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDslucastestDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lucastestDs",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lucastest-appsync-poc-int-lucastest"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDsofficeIdFetchLambda": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "officeIdFetchLambda",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lucastest-appsync-poc-int-lucastest"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDsflightsearchDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "flightsearchDs",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lucastest-appsync-poc-int-flightsearch"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDsshoppingCartDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "shoppingCartDs",
        "Description": "shopping cart table",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "shopping-cart-poc",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDslfsDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lfsDs",
        "Description": "lfs table",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "lfsCachePoc",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDslucasTest3Ds": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lucasTest3Ds",
        "Type": "NONE"
      }
    },
    "GraphQlDsaddPassengersDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "addPassengersDs",
        "Description": "shopping cart table",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "shopping-cart-poc",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDsretrieveMiniRulesDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "retrieveMiniRulesDs",
        "Description": "shopping cart table",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "shopping-cart-poc",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDspaymentSessionDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "paymentSessionDs",
        "Description": "payment session table",
        "Type": "AMAZON_DYNAMODB",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "payment-session-poc",
          "UseCallerCredentials": false
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDsfrictionlessPaymentLambdaDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "frictionlessPaymentLambdaDs",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lucastest-appsync-poc-int-frictionlessStepFunctionTest"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlDslfsUpdateEupgradeDs": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lfsUpdateEupgradeDs",
        "Type": "AWS_LAMBDA",
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lucastest-appsync-poc-int-updateLfsEupgrade"
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "HelloAppsyncRole",
            "Arn"
          ]
        }
      }
    },
    "GraphQlFunctionConfigurationlucastest": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lucastest",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDslucastestDs",
            "Name"
          ]
        },
        "Description": "lucas test",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/lucastest.js\nfunction request(ctx) {\n  return {\n    version: \"2018-05-29\",\n    operation: \"Invoke\",\n    payload: {\n      type: \"Query\",\n      field: \"getLucasTest\",\n      arguments: {\n        id: 1\n      }\n    }\n  };\n}\nfunction response(ctx) {\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL2x1Y2FzdGVzdC5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBTyxTQUFTLFFBQVMsS0FBSztBQUM1QixTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxXQUFXO0FBQUEsUUFDVCxJQUFJO0FBQUEsTUFDTjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUFFTyxTQUFTLFNBQVUsS0FBSztBQUM3QixTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationofficeIdCacheResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "officeIdCacheResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDstestTableDs",
            "Name"
          ]
        },
        "Description": "Fetch officeId from dynamodb cache given input parameters",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/officeIdCacheResolver.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  console.log(\"officeIdCacheResolver.request()\", ctx.args);\n  const { args: { input: { itineraries } } } = ctx;\n  console.log(\"itineraries: \", itineraries);\n  console.log(\"itineraries without destructuring: \", ctx.args.input.itineraries);\n  const [{ id: inputId }] = itineraries;\n  ctx.stash.id = inputId;\n  return { operation: \"GetItem\", key: util.dynamodb.toMapValues({ id: inputId || \"\" }) };\n}\nfunction response(ctx) {\n  const { error, result } = ctx;\n  console.log(\"officeIdCacheResolver.response()\", result);\n  if (!result || !result) {\n    return { officeIdResult: null, input: { id: ctx.stash.id } };\n  }\n  const num1 = result.num1;\n  const num2 = result.map1.num2;\n  console.log(\"num1: \", num1, typeof num1);\n  console.log(\"num2: \", num2, typeof num2);\n  console.log(\"this is true\", !!(num1 === num2));\n  console.log(\"this is false\", !!(num1 !== num2));\n  if (error) {\n    console.log(\"Error in officeIdCacheResolver.response(): \", error);\n    return util.appendError(error.message, error.type, result);\n  }\n  return { officeIdResult: result, input: { id: ctx.stash.id } };\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL29mZmljZUlkQ2FjaGVSZXNvbHZlci5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLFlBQVk7QUFDZCxTQUFTLFFBQVMsS0FBSztBQUU1QixVQUFRLElBQUksbUNBQW1DLElBQUksSUFBSTtBQUV2RCxRQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJO0FBRTdDLFVBQVEsSUFBSSxpQkFBaUIsV0FBVztBQUN4QyxVQUFRLElBQUksdUNBQXVDLElBQUksS0FBSyxNQUFNLFdBQVc7QUFFN0UsUUFBTSxDQUFDLEVBQUUsSUFBSSxRQUFRLENBQUMsSUFBSTtBQUUxQixNQUFJLE1BQU0sS0FBSztBQUVmLFNBQU8sRUFBRSxXQUFXLFdBQVcsS0FBSyxLQUFLLFNBQVMsWUFBWSxFQUFFLElBQUksV0FBVyxHQUFHLENBQUMsRUFBRTtBQUN2RjtBQUVPLFNBQVMsU0FBVSxLQUFLO0FBRTdCLFFBQU0sRUFBRSxPQUFPLE9BQU8sSUFBSTtBQUMxQixVQUFRLElBQUksb0NBQW9DLE1BQU07QUFDdEQsTUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRO0FBQ3RCLFdBQU8sRUFBRSxnQkFBZ0IsTUFBTSxPQUFPLEVBQUUsSUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFO0FBQUEsRUFDN0Q7QUFFQSxRQUFNLE9BQU8sT0FBTztBQUNwQixRQUFNLE9BQU8sT0FBTyxLQUFLO0FBRXpCLFVBQVEsSUFBSSxVQUFVLE1BQU0sT0FBTyxJQUFJO0FBQ3ZDLFVBQVEsSUFBSSxVQUFVLE1BQU0sT0FBTyxJQUFJO0FBQ3ZDLFVBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLFNBQVMsS0FBSztBQUM3QyxVQUFRLElBQUksaUJBQWlCLENBQUMsRUFBRSxTQUFTLEtBQUs7QUFHOUMsTUFBSSxPQUFPO0FBQ1QsWUFBUSxJQUFJLCtDQUErQyxLQUFLO0FBQ2hFLFdBQU8sS0FBSyxZQUFZLE1BQU0sU0FBUyxNQUFNLE1BQU0sTUFBTTtBQUFBLEVBQzNEO0FBRUEsU0FBTyxFQUFFLGdCQUFnQixRQUFRLE9BQU8sRUFBRSxJQUFJLElBQUksTUFBTSxHQUFHLEVBQUU7QUFDL0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationofficeIdFetchResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "officeIdFetchResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsofficeIdFetchLambda",
            "Name"
          ]
        },
        "Description": "Fetch officeId from external API given input parameters and stores result in dynamodb cache",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/officeIdFetchResolver.js\nfunction request(ctx) {\n  console.log(\"officeIdFetchResolver.request()\", ctx.result, ctx.prev.result);\n  const {\n    officeIdResult,\n    input\n  } = ctx.prev.result;\n  if (officeIdResult && officeIdResult.id) {\n    runtime.earlyReturn(officeIdResult);\n  }\n  return {\n    version: \"2018-05-29\",\n    operation: \"Invoke\",\n    payload: {\n      type: \"Query\",\n      field: \"getLucasTest\",\n      arguments: {\n        id: input.id\n      }\n    }\n  };\n}\nfunction response(ctx) {\n  console.log(\"officeIdFetchResolver.response()\", ctx.result, ctx.prev.result, ctx.stash);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL29mZmljZUlkRmV0Y2hSZXNvbHZlci5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBTyxTQUFTLFFBQVMsS0FBSztBQUU1QixVQUFRLElBQUksbUNBQW1DLElBQUksUUFBUSxJQUFJLEtBQUssTUFBTTtBQUUxRSxRQUFNO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxFQUNGLElBQUksSUFBSSxLQUFLO0FBRWIsTUFBSSxrQkFBa0IsZUFBZSxJQUFJO0FBQ3ZDLFlBQVEsWUFBWSxjQUFjO0FBQUEsRUFDcEM7QUFFQSxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxXQUFXO0FBQUEsUUFDVCxJQUFJLE1BQU07QUFBQSxNQUNaO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjtBQUVPLFNBQVMsU0FBVSxLQUFLO0FBQzdCLFVBQVEsSUFBSSxvQ0FBb0MsSUFBSSxRQUFRLElBQUksS0FBSyxRQUFRLElBQUksS0FBSztBQUN0RixTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationflightsearchResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "flightsearchResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsflightsearchDs",
            "Name"
          ]
        },
        "Description": "lfs resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/flightsearchResolver.js\nfunction request(ctx) {\n  console.log(\"flightSearchResolver.request()\", ctx);\n  console.log(\"identity\", ctx.identity);\n  const {\n    prev: { result: officeIdResult },\n    identity\n  } = ctx;\n  if (!identity || !identity.sub) {\n    console.log(\"early return\");\n    runtime.earlyReturn();\n  }\n  return {\n    version: \"2018-05-29\",\n    operation: \"Invoke\",\n    payload: {\n      type: \"Query\",\n      field: \"getLucasTest\",\n      arguments: {\n        officeIdResult\n      }\n    }\n  };\n}\nfunction response(ctx) {\n  const { error, result } = ctx;\n  if (error) {\n    console.log(\"Error in flightSearchResolver.response(): \", error);\n    return util.appendError(error.message, error.type, result);\n  }\n  if (!result.authorized) {\n    return util.unauthorized();\n  }\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL2ZsaWdodHNlYXJjaFJlc29sdmVyLmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFPLFNBQVMsUUFBUyxLQUFLO0FBQzVCLFVBQVEsSUFBSSxrQ0FBa0MsR0FBRztBQUNqRCxVQUFRLElBQUksWUFBWSxJQUFJLFFBQVE7QUFDcEMsUUFBTTtBQUFBLElBQ0osTUFBTSxFQUFFLFFBQVEsZUFBZTtBQUFBLElBQy9CO0FBQUEsRUFDRixJQUFJO0FBRUosTUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUs7QUFFOUIsWUFBUSxJQUFJLGNBQWM7QUFDMUIsWUFBUSxZQUFZO0FBQUEsRUFDdEI7QUFFQSxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxXQUFXO0FBQUEsUUFDVDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGO0FBRU8sU0FBUyxTQUFVLEtBQUs7QUFDN0IsUUFBTSxFQUFFLE9BQU8sT0FBTyxJQUFJO0FBQzFCLE1BQUksT0FBTztBQUNULFlBQVEsSUFBSSw4Q0FBOEMsS0FBSztBQUMvRCxXQUFPLEtBQUssWUFBWSxNQUFNLFNBQVMsTUFBTSxNQUFNLE1BQU07QUFBQSxFQUMzRDtBQUNBLE1BQUksQ0FBQyxPQUFPLFlBQVk7QUFDdEIsV0FBTyxLQUFLLGFBQWE7QUFBQSxFQUMzQjtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationshoppingCartResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "shoppingCartResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsshoppingCartDs",
            "Name"
          ]
        },
        "Description": "shopping cart resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/Query.shoppingCartResolver.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  return {\n    operation: \"Query\",\n    query: {\n      expression: \"#pk = :pkValue AND begins_with(#sk, :skValue1)\",\n      // expression: '#pk = :pkValue AND (begins_with(#sk, :skValue1) OR begins_with(#sk, :skValue2))',\n      expressionNames: {\n        \"#pk\": \"BookingSessionId\",\n        \"#sk\": \"SK\"\n      },\n      expressionValues: {\n        \":pkValue\": util.dynamodb.toDynamoDB(\"ee74e035-4d95-4dc1-ad25-955ae163abc6\"),\n        \":skValue1\": util.dynamodb.toDynamoDB(\"bound#LAX-YYZ-2023-05-21-ABC123#\")\n        // ':skValue2': 'bound#YYZ-LAX-2023-06-06-ABC123#'\n      }\n    },\n    // filter: {\n    //   expression: `\n    //   (\n    //     #recommendationColumn.#id = :recommendationId1Value OR\n    //     #recommendationColumn.#id = :recommendationId2Value\n    //   ) AND #expirationTimeColumn > :expirationTimeValue`,\n    //   expressionNames: {\n    //     '#recommendationColumn': 'Recommendation',\n    //     '#id': 'id',\n    //     '#boundDetailsColumn': 'BoundDetails',\n    //     '#expirationTimeColumn': 'ExpirationTime'\n    //   },\n    //   expressionValues: {\n    //     ':recommendationId1Value': util.dynamodb.toDynamoDB('eae96e1a-82fc-461a-baee-98858dd476cf'),\n    //     ':recommendationId2Value': util.dynamodb.toDynamoDB('1c92b602-e0db-424b-a4f2-97e664a7a193'),\n    //     ':expirationTimeValue': util.dynamodb.toDynamoDB(168236728)\n    //   }\n    // },\n    select: \"ALL_ATTRIBUTES\"\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5LnNob3BwaW5nQ2FydFJlc29sdmVyLmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsWUFBWTtBQUVkLFNBQVMsUUFBUyxLQUFLO0FBQzVCLFNBQU87QUFBQSxJQUNMLFdBQVc7QUFBQSxJQUNYLE9BQU87QUFBQSxNQUNMLFlBQVk7QUFBQTtBQUFBLE1BRVosaUJBQWlCO0FBQUEsUUFDZixPQUFPO0FBQUEsUUFDUCxPQUFPO0FBQUEsTUFDVDtBQUFBLE1BQ0Esa0JBQWtCO0FBQUEsUUFDaEIsWUFBWSxLQUFLLFNBQVMsV0FBVyxzQ0FBc0M7QUFBQSxRQUMzRSxhQUFhLEtBQUssU0FBUyxXQUFXLGtDQUFrQztBQUFBO0FBQUEsTUFFMUU7QUFBQSxJQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFtQkEsUUFBUTtBQUFBLEVBQ1Y7QUFDRjtBQUVPLFNBQVMsU0FBVSxLQUFLO0FBQzdCLFVBQVEsSUFBSSxVQUFVLElBQUksTUFBTTtBQUNoQyxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationlucasTest3Resolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lucasTest3Resolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDslucasTest3Ds",
            "Name"
          ]
        },
        "Description": "lucasTest3 resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/Query.getLucasTest3.js\nfunction request(ctx) {\n  console.log(\"ctx\", ctx);\n  console.log({\n    fieldName: ctx.info.fieldName,\n    headers: ctx.request.headers,\n    logTypeCustom: \"aco-custom\"\n  });\n  runtime.earlyReturn({ id: 1 });\n  return {};\n}\nfunction response(ctx) {\n  const {\n    arguments: {\n      input\n    }\n  } = ctx;\n  console.log(\"input\", input);\n  console.log(\"parsed\", JSON.parse(input.testJson));\n  const parsed = JSON.parse(input.testJson);\n  return {\n    id: \"id\",\n    test1: parsed.test1,\n    test2: parsed.test2,\n    originalJson: input.testJson,\n    doesntexist: \"Whjat\"\n  };\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5LmdldEx1Y2FzVGVzdDMuanMiXSwKICAibWFwcGluZ3MiOiAiO0FBQ08sU0FBUyxRQUFTLEtBQUs7QUFDNUIsVUFBUSxJQUFJLE9BQU8sR0FBRztBQUN0QixVQUFRLElBQUk7QUFBQSxJQUNWLFdBQVcsSUFBSSxLQUFLO0FBQUEsSUFDcEIsU0FBUyxJQUFJLFFBQVE7QUFBQSxJQUNyQixlQUFlO0FBQUEsRUFDakIsQ0FBQztBQUNELFVBQVEsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzdCLFNBQU8sQ0FBQztBQUNWO0FBRU8sU0FBUyxTQUFVLEtBQUs7QUFDN0IsUUFBTTtBQUFBLElBQ0osV0FBVztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUEsRUFDRixJQUFJO0FBRUosVUFBUSxJQUFJLFNBQVMsS0FBSztBQUMxQixVQUFRLElBQUksVUFBVSxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFaEQsUUFBTSxTQUFTLEtBQUssTUFBTSxNQUFNLFFBQVE7QUFFeEMsU0FBTztBQUFBLElBQ0wsSUFBSTtBQUFBLElBQ0osT0FBTyxPQUFPO0FBQUEsSUFDZCxPQUFPLE9BQU87QUFBQSxJQUNkLGNBQWMsTUFBTTtBQUFBLElBQ3BCLGFBQWE7QUFBQSxFQUNmO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationlfsResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "lfsResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDslfsDs",
            "Name"
          ]
        },
        "Description": "lfs resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/Query.lfs.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  return {\n    operation: \"Query\",\n    query: {\n      expression: \"#pk = :pkValue AND begins_with(#sk, :skValue)\",\n      expressionNames: {\n        \"#pk\": \"BookingSessionId\",\n        \"#sk\": \"SK\"\n      },\n      expressionValues: {\n        \":pkValue\": util.dynamodb.toDynamoDB(\"ee74e035-4d95-4dc1-ad25-955ae163abc6\"),\n        \":skValue\": util.dynamodb.toDynamoDB(\"bound#LAX-YYZ-2023-05-21-ABC123#\")\n      }\n    },\n    filter: {\n      expression: \"#expirationTimeColumn > :expirationTimeValue\",\n      expressionNames: { \"#expirationTimeColumn\": \"ExpirationTime\" },\n      expressionValues: { \":expirationTimeValue\": util.dynamodb.toDynamoDB(1685101431) }\n    },\n    select: \"ALL_ATTRIBUTES\"\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5Lmxmcy5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLFlBQVk7QUFFZCxTQUFTLFFBQVMsS0FBSztBQUM1QixTQUFPO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxPQUFPO0FBQUEsTUFDTCxZQUFZO0FBQUEsTUFDWixpQkFBaUI7QUFBQSxRQUNmLE9BQU87QUFBQSxRQUNQLE9BQU87QUFBQSxNQUNUO0FBQUEsTUFDQSxrQkFBa0I7QUFBQSxRQUNoQixZQUFZLEtBQUssU0FBUyxXQUFXLHNDQUFzQztBQUFBLFFBQzNFLFlBQVksS0FBSyxTQUFTLFdBQVcsa0NBQWtDO0FBQUEsTUFDekU7QUFBQSxJQUNGO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDTixZQUFZO0FBQUEsTUFDWixpQkFBaUIsRUFBRSx5QkFBeUIsaUJBQWlCO0FBQUEsTUFDN0Qsa0JBQWtCLEVBQUUsd0JBQXdCLEtBQUssU0FBUyxXQUFXLFVBQVUsRUFBRTtBQUFBLElBQ25GO0FBQUEsSUFDQSxRQUFRO0FBQUEsRUFDVjtBQUNGO0FBRU8sU0FBUyxTQUFVLEtBQUs7QUFDN0IsVUFBUSxJQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ2hDLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationaddPassengersResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "addPassengersResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsaddPassengersDs",
            "Name"
          ]
        },
        "Description": "addPassengers resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/addPassengers.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  return {\n    operation: \"UpdateItem\",\n    key: util.dynamodb.toMapValues({\n      ShoppingCartId: \"f83019e6-eb2a-48dc-a3bc-83ed7abff346\",\n      SK: \"session#6e553305-8511-48b2-90fe-028a57519573\"\n    }),\n    update: {\n      expression: \"SET #passengers = :passengers, #contactInfo = :contactInfo\",\n      expressionNames: { \"#passengers\": \"Passengers\", \"#contactInfo\": \"ContactInfo\" },\n      expressionValues: {\n        \":passengers\": util.dynamodb.toDynamoDB({ passenger1: { id: 123123, name: \"pepito\", otherfield: \"fdas\" } }),\n        \":contactInfo\": util.dynamodb.toDynamoDB({ email: \"test@test.com\" })\n      },\n      returnValues: \"ALL_NEW\"\n    }\n    // condition: {\n    //   expression: '#expirationTimeColumn > :expirationTimeValue',\n    //   expressionNames: { '#expirationTimeColumn': 'ExpirationTime' },\n    //   expressionValues: { ':expirationTimeValue': util.dynamodb.toDynamoDB(16993688) }\n    // },\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL2FkZFBhc3NlbmdlcnMuanMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxZQUFZO0FBRWQsU0FBUyxRQUFTLEtBQUs7QUFDNUIsU0FBTztBQUFBLElBQ0wsV0FBVztBQUFBLElBQ1gsS0FBSyxLQUFLLFNBQVMsWUFBWTtBQUFBLE1BQzdCLGdCQUFnQjtBQUFBLE1BQ2hCLElBQUk7QUFBQSxJQUNOLENBQUM7QUFBQSxJQUNELFFBQVE7QUFBQSxNQUNOLFlBQVk7QUFBQSxNQUNaLGlCQUFpQixFQUFFLGVBQWUsY0FBYyxnQkFBZ0IsY0FBYztBQUFBLE1BQzlFLGtCQUFrQjtBQUFBLFFBQ2hCLGVBQWUsS0FBSyxTQUFTLFdBQVcsRUFBRSxZQUFZLEVBQUUsSUFBSSxRQUFRLE1BQU0sVUFBVSxZQUFZLE9BQU8sRUFBRSxDQUFDO0FBQUEsUUFDMUcsZ0JBQWdCLEtBQUssU0FBUyxXQUFXLEVBQUUsT0FBTyxnQkFBZ0IsQ0FBQztBQUFBLE1BQ3JFO0FBQUEsTUFDQSxjQUFjO0FBQUEsSUFDaEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNRjtBQUNGO0FBRU8sU0FBUyxTQUFVLEtBQUs7QUFDN0IsVUFBUSxJQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ2hDLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationretrieveMiniRulesResolver": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "retrieveMiniRulesResolver",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsretrieveMiniRulesDs",
            "Name"
          ]
        },
        "Description": "retrieveMiniRules resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/Query.retrieveMiniRules.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  return {\n    operation: \"GetItem\",\n    key: util.dynamodb.toMapValues({\n      ShoppingCartId: \"f83019e6-eb2a-48dc-a3bc-83ed7abff346\",\n      SK: \"ac_fare_rules\"\n    })\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5LnJldHJpZXZlTWluaVJ1bGVzLmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsWUFBWTtBQUVkLFNBQVMsUUFBUyxLQUFLO0FBQzVCLFNBQU87QUFBQSxJQUNMLFdBQVc7QUFBQSxJQUNYLEtBQUssS0FBSyxTQUFTLFlBQVk7QUFBQSxNQUM3QixnQkFBZ0I7QUFBQSxNQUNoQixJQUFJO0FBQUEsSUFDTixDQUFDO0FBQUEsRUFDSDtBQUNGO0FBRU8sU0FBUyxTQUFVLEtBQUs7QUFDN0IsVUFBUSxJQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ2hDLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationorderCreation": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "orderCreation",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsshoppingCartDs",
            "Name"
          ]
        },
        "Description": "order creation resolver",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/orderCreation.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  const {\n    input: {\n      subscriptionId,\n      pnrStatus\n    }\n  } = ctx.args;\n  const now = util.time.nowEpochMilliSeconds();\n  return {\n    operation: \"UpdateItem\",\n    key: util.dynamodb.toMapValues({\n      ShoppingCartId: \"f83019e6-eb2a-48dc-a3bc-83ed7abff346\",\n      SK: `subscriptionId#${subscriptionId}`\n    }),\n    update: {\n      expression: \"SET #creationTimeColumn = :creationTimeValue, #orderStatusColumn = :orderStatusValue\",\n      expressionNames: { \"#creationTimeColumn\": \"CreationTime\", \"#orderStatusColumn\": \"orderCreationStatus\" },\n      expressionValues: {\n        \":creationTimeValue\": util.dynamodb.toDynamoDB(now),\n        \":orderStatusValue\": util.dynamodb.toDynamoDB(pnrStatus)\n      }\n    }\n  };\n}\nfunction response(ctx) {\n  const {\n    result\n  } = ctx;\n  console.log(\"result\", result);\n  return {\n    timestamp: result?.CreationTime ?? -1,\n    isOrderCreated: result?.orderCreationStatus === \"completed\",\n    subscriptionId: result?.subscriptionId ?? \"nope\"\n  };\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL29yZGVyQ3JlYXRpb24uanMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxZQUFZO0FBRWQsU0FBUyxRQUFTLEtBQUs7QUFDNUIsUUFBTTtBQUFBLElBQ0osT0FBTztBQUFBLE1BQ0w7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUFBLEVBQ0YsSUFBSSxJQUFJO0FBSVIsUUFBTSxNQUFNLEtBQUssS0FBSyxxQkFBcUI7QUFDM0MsU0FBTztBQUFBLElBQ0wsV0FBVztBQUFBLElBQ1gsS0FBSyxLQUFLLFNBQVMsWUFBWTtBQUFBLE1BQzdCLGdCQUFnQjtBQUFBLE1BQ2hCLElBQUksa0JBQWtCO0FBQUEsSUFDeEIsQ0FBQztBQUFBLElBQ0QsUUFBUTtBQUFBLE1BQ04sWUFBWTtBQUFBLE1BQ1osaUJBQWlCLEVBQUUsdUJBQXVCLGdCQUFnQixzQkFBc0Isc0JBQXNCO0FBQUEsTUFDdEcsa0JBQWtCO0FBQUEsUUFDaEIsc0JBQXNCLEtBQUssU0FBUyxXQUFXLEdBQUc7QUFBQSxRQUNsRCxxQkFBcUIsS0FBSyxTQUFTLFdBQVcsU0FBUztBQUFBLE1BQ3pEO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjtBQUVPLFNBQVMsU0FBVSxLQUFLO0FBQzdCLFFBQU07QUFBQSxJQUNKO0FBQUEsRUFDRixJQUFJO0FBRUosVUFBUSxJQUFJLFVBQVUsTUFBTTtBQUU1QixTQUFPO0FBQUEsSUFDTCxXQUFXLFFBQVEsZ0JBQWdCO0FBQUEsSUFDbkMsZ0JBQWdCLFFBQVEsd0JBQXdCO0FBQUEsSUFDaEQsZ0JBQWdCLFFBQVEsa0JBQWtCO0FBQUEsRUFDNUM7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationgetPaymentSession": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "getPaymentSession",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDslucastestDs",
            "Name"
          ]
        },
        "Description": "get payment session",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/getPaymentSession.js\nfunction request(ctx) {\n  return {\n    operation: \"Invoke\",\n    payload: {\n      arguments: {}\n    }\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL2dldFBheW1lbnRTZXNzaW9uLmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNPLFNBQVMsUUFBUyxLQUFLO0FBQzVCLFNBQU87QUFBQSxJQUNMLFdBQVc7QUFBQSxJQUNYLFNBQVM7QUFBQSxNQUNQLFdBQVcsQ0FBQztBQUFBLElBQ2Q7QUFBQSxFQUNGO0FBQ0Y7QUFFTyxTQUFTLFNBQVUsS0FBSztBQUM3QixVQUFRLElBQUksVUFBVSxJQUFJLE1BQU07QUFDbEM7IiwKICAibmFtZXMiOiBbXQp9Cg==\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlFunctionConfigurationupdateLfsEupgrade": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "updateLfsEupgrade",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDslfsUpdateEupgradeDs",
            "Name"
          ]
        },
        "Description": "update lfs",
        "FunctionVersion": "2018-05-29",
        "Code": "// resolvers/updateLfs.js\nimport { util } from \"@aws-appsync/utils\";\nfunction request(ctx) {\n  return {\n    operation: \"Invoke\",\n    payload: {}\n  };\n}\nfunction response(ctx) {\n  console.log(\"result\", ctx.result);\n  return ctx.result;\n}\nexport {\n  request,\n  response\n};\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL3VwZGF0ZUxmcy5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLFlBQVk7QUFFZCxTQUFTLFFBQVMsS0FBSztBQUM1QixTQUFPO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxTQUFTLENBQUM7QUFBQSxFQUNaO0FBQ0Y7QUFFTyxTQUFTLFNBQVUsS0FBSztBQUM3QixVQUFRLElBQUksVUFBVSxJQUFJLE1BQU07QUFDaEMsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        }
      }
    },
    "GraphQlResolverQuerygetOfficeId": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getOfficeId",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationofficeIdCacheResolver",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationofficeIdFetchResolver",
                "FunctionId"
              ]
            },
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationflightsearchResolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetLucasTest": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getLucasTest",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationlucastest",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetLucasTest2": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getLucasTest2",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationshoppingCartResolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetLucasTest3": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getLucasTest3",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationlucasTest3Resolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerylfs": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "lfs",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationlfsResolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQueryretrieveMiniRules": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "retrieveMiniRules",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationretrieveMiniRulesResolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationaddPassengers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addPassengers",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationaddPassengersResolver",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverMutationorderCreation": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "orderCreation",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationorderCreation",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQuerygetPaymentSession": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getPaymentSession",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationgetPaymentSession",
                "FunctionId"
              ]
            }
          ]
        }
      }
    },
    "GraphQlResolverQueryupdateLfsEupgrade": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": [
        "GraphQlSchema"
      ],
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "updateLfsEupgrade",
        "Code": "\nexport function request() {\n  return {};\n}\n\nexport function response(ctx) {\n  return ctx.prev.result;\n}\n",
        "Runtime": {
          "Name": "APPSYNC_JS",
          "RuntimeVersion": "1.0.0"
        },
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "GraphQlFunctionConfigurationupdateLfsEupgrade",
                "FunctionId"
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-ServerlessDeploymentBucketName"
      }
    },
    "LucastestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LucastestLambdaVersionxEwq8U3iQUllRMyTcU7nubjqwy1KPEPs9OJip7ZQU8"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-LucastestLambdaFunctionQualifiedArn"
      }
    },
    "FlightsearchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FlightsearchLambdaVersionFRyxgoUEx92WcucImkVXPcUUguJg51crXxrc6x0xuNs"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-FlightsearchLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePassengersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePassengersLambdaVersion84AE1RTMusFtDtccdpqZY5lnr4L9oRdoXqEZCcY"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-UpdatePassengersLambdaFunctionQualifiedArn"
      }
    },
    "EventBridgeTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventBridgeTestLambdaVersionZG6SNi9oM1YKcoCOgWsX07Pe5il0h7R2a9jBrspgA"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-EventBridgeTestLambdaFunctionQualifiedArn"
      }
    },
    "RotateSecretLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RotateSecretLambdaVersion7AMTeWl8Wn2dXCz7dwUByKFzXY8SCgYoPPg3dA8m9L0"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-RotateSecretLambdaFunctionQualifiedArn"
      }
    },
    "FrictionlessStepFunctionTestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FrictionlessStepFunctionTestLambdaVersion99GO7fXu5yOQ1oIyvedVAzGOCITYyMHuEnUiAt5Ps"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-FrictionlessStepFunctionTestLambdaFunctionQualifiedArn"
      }
    },
    "UpdateLfsEupgradeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateLfsEupgradeLambdaVersionyD35VWijjaqcBz5wwlbGw1rrmpUshY58SveUZ38wkTc"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-UpdateLfsEupgradeLambdaFunctionQualifiedArn"
      }
    },
    "ContentJsonFileValidatorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ContentJsonFileValidatorLambdaVersion26lOuqRKtgzSVXAzZkyovs6uT6cHz5AItApF8MQu54"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-ContentJsonFileValidatorLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-lucastest-appsync-poc-int-HttpApiUrl"
      }
    }
  }
}